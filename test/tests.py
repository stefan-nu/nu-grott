# coding=utf-8

import logging
import unittest

# add folders where imported files can be found
import sys
sys.path.insert(0, '../src')
sys.path.insert(1, 'src')

from grottconf import Conf
from utils     import validate_record, decrypt, byte_decrypt
from grottdata import process_data, detect_layout, find_record

logger = logging.getLogger(__name__)


class TestMessageProcessing(unittest.TestCase):
    
    def setUp(self) -> None:
        self.raw_data_MOD700 = b'\
\x00\x01\x00\x06\x01\x69\x50\x1b\x09\x33\x2c\x42\x20\x46\x4c\x77\x35\x2a\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6e\x34\x74\x78\x68\x54\x71\x73\x76\x5e\x4d\x4d\x69\x4a\x5d\x5b\x52\x4c\x5a\
\x72\x4a\x43\x45\x56\x40\x5a\x73\x5e\x56\x4f\x4f\x40\x58\x75\x41\x59\x59\x54\
\x58\x59\x74\x45\x41\x4f\x4d\x59\x43\x70\x5c\x5b\x5b\x4c\x41\x46\x69\x4b\x43\
\x45\x56\x4c\x5a\x7f\x5e\x5e\x45\x53\x5a\x45\x6b\x40\x5c\x42\x4f\x42\x58\x77\
\x5c\x56\x5b\x51\x5a\x43\x6b\x42\x41\x4e\x4d\x46\x47\x73\x5c\x5e\x5b\x53\x47\
\x41\x69\x44\x43\x45\x52\x41\x5a\x75\x5e\x5e\x59\x50\x58\x44\x69\x47\x43\x47\
\x4f\x4d\x58\x72\x4b\x5e\x59\x53\x58\x42\x76\x4a\x41\x40\x4d\x59\x45\x70\x46\
\x41\x44\x4d\x44\x5a\x7e\x5e\x5b\x4e\x4f\x4c\x58\x7f\x44\x41\x45\x4d\x45\x47\
\x69\x44\x43\x45\x4f\x46\x58\x74\x44\x41\x44\x4d\x45\x44\x70\x5c\x5f\x5b\x55\
\x46\x5a\x77\x5e\x5d\x42\x4f\x42\x58\x74\x40\x41\x46\x4d\x45\x45\x69\x45\x43\
\x46\x53\x5a\x4c\x6b\x43\x5c\x59\x58\x58\x45\x74\x4a\x41\x43\x50\x58\x40\x77\
\x44\x41\x4e\x4d\x40\x44\x70\x5c\x57\x5b\x55\x44\x42\x69\x44\x43\x47\x4f\x44\
\x58\x77\x5c\x5f\x5b\x51\x5a\x44\x6b\x42\x41\x47\x4d\x44\x5a\x77\x5e\x5f\x59\
\x51\x58\x44\x69\x42\x43\x47\x4f\x44\x58\x77\x5c\x5f\x5b\x51\x5a\x44\x6b\x42\
\x41\x47\x4d\x44\x5a\x77\x5e\x5f\x59\x51\x58\x44\x69\x42\x43\x47\x4f\x44\x58\
\x77\x5c\x5f\x5b\x51\x5a\x44\x6b\x42\x41\x47\x4d\x44\x5a\x77\x5e\x5f\x59\x51\
\x58\x44\x69\x42\x43\x47\x4f\x44\x58\x77\x5c\x5f\x5b\x51\x5a\x44\x6b\x42\x41\
\x47\x4d\x44\x5a\x77\x5e\x4d\xf7'

        self.raw_data_SPH6000 = b"\
\x02\x2e\x00\x06\x03\x3f\x01\x04\x0d\x22\x2c\x40\x20\x47\x44\x74\x2a\x2e\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x21\x20\x22\x3b\x35\x73\x46\x5f\x47\x59\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x77\x7e\x69\x4b\x53\x7a\x74\x61\
\x74\x74\x3b\x72\x6a\x77\x61\x3d\xa0\x49\xeb\x6e\x8d\x61\x74\x3d\xae\x72\x6f\
\x77\x61\x74\x74\x47\x72\x6f\x76\x21\x74\x71\x9c\x70\xd2\x7f\xfb\x74\xba\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x3f\
\xa4\x67\xf8\x4e\x49\x6f\x27\x61\x74\x3d\x60\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x52\x74\
\x47\x93\xb4\x73\x09\x36\x86\x47\x72\x6f\x5f\x61\x74\x92\xbb\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\
\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x90\x86\x75\
\x3e\x46\x54\x6e\x3d\x61\x74\x74\xfd\x7c\xfc\x79\xca\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x46\x1d\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x47\x72\x6f\x77\x61\x74\x77\xaf\x76\x0b\x77\x64\x74\x74\x47\x72\x6f\x77\x61\
\x70\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\xd5\
\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x42\xc3\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x6a\xc6\x6f\x77\x7a\xc8\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x74\xcb\x61\x74\x74\x53\x72\x6e\x70\
\x65\x74\x74\x47\x72\x6f\x45\x61\x74\x0a\x4c\x72\x6f\x77\x6e\x74\x74\xdf\x3a\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x0c\x72\x6f\xba\xcb\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\
\x77\x62\x9c\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x76\x0a\x73\x80\x74\x74\
\x47\x72\x6e\x18\x61\x74\x74\x47\x71\x95\x77\x61\x74\x74\x47\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x49\x74\x74\xa2\x94\x6f\x77\x61\x6d\x74\x47\x3d\x4b\
\x77\x61\x3d\x04\x47\x72\x72\x3b\x61\x74\x74\x6f\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x46\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\
\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x95\x12"

        self.raw_data_QKB = b'\
\x00\x01\x00\x02\x00\xd9\x01\x04\x59\x55\x5a\x30\x38\x33\x30\x30\x34\x34\
\x51\x4b\x42\x32\x39\x30\x39\x32\x39\x45\x00\x00\x00\x00\x00\x00\x02\x00\x00\
\x00\x2c\x00\x01\x00\x00\x05\x8e\x0f\x45\x00\x03\x00\x00\x05\x8e\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x05\x00\x13\x85\x08\xe5\x00\x06\x00\x00\x05\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x01\x00\x00\x5b\xa8\x01\x80\xd3\xb1\x00\xf1\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x42\x00\x00\x00\x00\x00\
\x2d\x00\x59\x4e\x20\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x61\x60\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x61\x60\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\
\x00\x08\x00\x00\x0f\xd0\x0f\x57\x0f\x4d\x00\x01\x10\x34\x75\x30\x00\x00\x00\
\x10\x00\xeb\x0e\x10\x00\x03\x00\x02\x00\x2d\x00\x00\x00\x00\x00\x00\x00\x00'

        self.decoded = "\
000d0006033f01504a50433741333033584100000000000000000000000000000000000000004\
e57434f4134343030380000000000000000000000000000000000000000160a1c003838030000\
007c000000000000000000000000000000000000000000000000400005d902c0089a00cf00000\
00000000000000000000000000000000000000000000000000000000000000000000000000013\
8a093100090000000000000000000000000000000000000000000000000000000000000000e13\
704645ae8000000000000e6540000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000e73f00ec00e20\
0e4000000b9009c005b0000000000000000000000000000000000000000000000000000000000\
00016e00000003000000000000000000000000000003e80464000000000000000000040020000\
000000000000000000000000000b9000000000f3c000000000000000000000f3c000000000000\
0000000000000000000000000f3c000000000000000000000f3c0000001400000002000000000\
00500007d8400000000000097fd00000000000000000000000000000000000000050000ccc600\
00000000000000000000000000000000000000000000000000000000000000000003e80000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000046504e100000000016e0000000703fa0000000000000000000000000000000000\
00e53f0000000000004ec80000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000001000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000009002"


    def test_parse_decoded_layout_NWCOA44008(self):
        conf = Conf("2.7.6") 
        
        # ensure configuration is suitable for the test
        conf.pvoutput  = False 
        conf.nomqtt    = True
        conf.influx    = False
        conf.extension = False
        conf.verbose   = False
        conf.store_unknown_records = False
        
        data = process_data(conf, self.raw_data_SPH6000)
        #print(data)
        #assert isinstance(data, dict)
        assert (True) # how to check that processing was successful?
    
    
    def test_check_crc(self):
        "Test if the frame validation function work"
        result = validate_record(self.raw_data_SPH6000)
        assert (result, True)
    
    
    def test_detect_layout_T060104X(self):
        conf = Conf("2.7.6") 
        layout = detect_layout(self.raw_data_SPH6000, conf)
        assert layout == "T060104X"
    
    
    # Test if layout for SPH inverter gets created correctly
    def test_detect_layout_T060104XSPH(self):
        conf = Conf("2.7.6") 
        layout = detect_layout(self.raw_data_SPH6000, conf, "SPH")
        assert layout == "T060104XSPH"
    
    
    def test_layout_search(self):
        conf       = Conf("2.7.6")
        detected   = "T06NNNN"
        undetected = "T060103XSPH"
        renamed    = "T060104XSPH"
    
        result = find_record(detected, conf.recorddict)
        assert result == detected
    
        layout = find_record(undetected, conf.recorddict)
        assert layout is None
    
        #layout = find_record(renamed, conf.recorddict)
        #assert layout == "T06NNNNXSPH"


    def test_dec(self):
        assert byte_decrypt(self.raw_data_SPH6000) == bytes.fromhex(decrypt(self.raw_data_SPH6000))


    def test_decryption(self):
        # Disabled ATM
        return
        raw_data = b'\
\x01\xc4\x00\x06\x03\x3f\x01\x04\x0d\x22\x2c\x40\x20\x47\x44\x74\x2a\x2e\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x21\x20\x22\x3b\x35\x73\x46\x5f\x47\x59\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x77\x7e\x68\x4d\x5d\x66\x74\x61\
\x74\x74\x3b\x72\x6a\x77\x61\x4e\x88\x49\xe4\x6e\xe2\x61\x74\x4f\x7e\x72\x6f\
\x77\x61\x74\x74\x47\x72\x6f\x76\x21\x74\x71\x9e\x70\xde\x7f\xfa\x74\xbb\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x4d\
\xd8\x67\xf3\x4e\x40\x6f\x36\x61\x74\x4e\x24\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x7c\x74\
\x47\x93\x50\x73\x04\x1b\x41\x47\x72\x6f\x7f\x61\x74\x92\x1b\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\
\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x90\x26\x75\
\x69\x46\x70\x6e\x63\x61\x74\x74\xfd\x7c\xff\x79\xcd\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x46\x1c\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x47\x72\x6f\x77\x61\x74\x77\xaf\x76\x0b\x77\x64\x74\x74\x47\x72\x6f\x77\x61\
\x70\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\xd5\
\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x4c\xfb\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x64\xfe\x6f\x77\x77\xdc\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x79\xdf\x61\x74\x74\x53\x72\x6e\x70\
\x67\x74\x74\x47\x72\x6f\x54\x61\x74\x09\xec\x72\x6f\x77\x60\x74\x74\xd0\x8c\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x6e\x72\x6f\xbb\x92\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\
\x77\x62\x9c\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x76\x0a\x73\x80\x74\x74\
\x47\x72\x6e\x19\x61\x74\x74\x47\x71\x95\x77\x61\x74\x74\x47\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x66\x74\x74\xa2\x34\x6f\x77\x61\x72\x74\x47\x3c\xa1\
\x77\x61\x4e\x88\x47\x72\x79\xdf\x61\x74\x74\x40\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\
\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x46\x72\x6f\x77\x61\
\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\
\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\
\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\
\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\
\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\x6f\x77\x61\x74\x74\x47\x72\
\x6f\xa5\x2a'

        expected = "\
01c20006033f01044a50433741333033584100000000000000000000000000000000000000004\
e57434f4134343030380000000000000000000000000000000000000000160a1c0a2d09030000\
007c000500002c240f20012400002c3200000000000000000001400005d902b0089900cf00000\
000000000000000000000000000000000000000000000000000000000000000000000002c5a13\
8a0934003100002c4800000000000000000000000000000000000000000000000000070000e13\
e04656e3e000000070000e65b0000000000000000000000000000000000000000000000000000\
0000000000000000000000000000000000000000000000000000000000000000e746011a01020\
110000000ba0f1b0f340000000000000000000000000000000000000000000000000000000000\
00016e00000000000000000000000000000000000003e80464000500000000000000040000000\
000000000000000000000000000ba0000000000000000000000000000000000000000170c0000\
0000000000000000170c000016a80000000000000000000016a80000001400010705000000000\
02300007dab00000001000097fe00000000000000000000000000000000000000290000ccf300\
00000000000000000000000000000000000000000000000000000000000000000003e80000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000046504e100000000016e0000000003fa0000000000000000000000000000000700\
00e5460000000600004ece00002db40000157c000000070000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
00000000001000000000000000000000000000000000000000000000000000000000000000000\
00000000000000000000000000000000000000000000000000000000000000000000000000000\
000000000000000000000000000000000000000000000000000000000366f"

        assert decrypt(raw_data) == expected